package com.OOBDeviceTest.StressTest;

import java.util.Timer;
import java.util.TimerTask;
import com.OOBDeviceTest.R;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.text.InputType;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;

/*
 * Author 	: cghs
 * Data		: 2013-05-08
 * Function : Test Camera (not call CameraLauncher)
 */


public class CameraOpenTest extends Activity implements OnClickListener{

	private final int REQUEST_CODE_CAMERA = 0;
	private final int MSG_START_CAMERA = 0;
	private CheckBox mUseSystemCB;
	private TextView mMaxTV;
	private Button mMaxCountBtn;
	private Button mStartBtn;
	private Button mStopBtn;
	private Button mExitBtn;
	
	private boolean isTesting = false;
	private boolean isUseSystem = false; //true to call SystemCameraLauncher
	
	private int mMaxCount = 0;
	private int mNowCount = 0;
	private WakeLock mWakeLock;
	private Timer mTimer = null;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_camera_open_test);
		initRes();
		
	}
	
	private void initRes() {
		mStartBtn = (Button) findViewById(R.id.start_btn);
		mStartBtn.setOnClickListener(this);
		mStopBtn = (Button) findViewById(R.id.stop_btn);
		mStopBtn.setOnClickListener(this);
		mExitBtn = (Button) findViewById(R.id.exit_btn);
		mExitBtn.setOnClickListener(this);
		
		mUseSystemCB = (CheckBox) findViewById(R.id.usesystem_CB);
		mMaxTV = (TextView) findViewById(R.id.maxtime_tv);
		mMaxTV.setText(getString(R.string.camera_maxtime)+mMaxCount);
		mMaxCountBtn = (Button) findViewById(R.id.maxtime_btn);
		mMaxCountBtn.setOnClickListener(this);
		
		
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == REQUEST_CODE_CAMERA && isTesting) {
			Log.e("cghs", "mNowCount:"+mNowCount+" mMaxCount:"+mMaxCount);
			if (mMaxCount != 0 && mNowCount >= mMaxCount) {
				isTesting = false;
				mNowCount = 0;
			} else  {
				mHandler.sendEmptyMessageDelayed(MSG_START_CAMERA, 5000);
			}
			
		}
		
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.start_btn:
			holdWakeLock();
			isUseSystem = mUseSystemCB.isChecked();
			isTesting = true;
			if (isUseSystem) {
				TestSystemCamera();
			} else {
				testUserCamera();
			}
			
			break;
		case R.id.stop_btn:
			isTesting = false;
			mNowCount = 0;
			stopTest();
			releaseWakeLock();
			break;
		case R.id.exit_btn:
			finish();
			break;
		case R.id.maxtime_btn:
			onSetClick();
			break;
		default:
			break;
		}
	}
	
	private void testUserCamera() {
		mNowCount = mNowCount+1;
		Intent intent = new Intent(this, CameraAutoTestActivity.class);
		startActivityForResult(intent, REQUEST_CODE_CAMERA);
	}
	
	
	private void onSetClick() {
		final EditText editText = new EditText(this);
		editText.setInputType(InputType.TYPE_CLASS_NUMBER);
		new AlertDialog.Builder(this)
			.setTitle(R.string.dialog_title)
			.setView(editText)
			.setPositiveButton(R.string.dialog_ok, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					if(!editText.getText().toString().trim().equals("")) {
						mMaxCount = Integer.valueOf(editText.getText().toString());
						mMaxTV.setText(getString(R.string.camera_maxtime)+mMaxCount);
					}
				}
			})
			.setNegativeButton(R.string.dialog_cancel, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					dialog.cancel();
				}
				
			}).show();
	}
	
	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case MSG_START_CAMERA:
				if (!isTesting) return ;
				mNowCount ++;
				Intent intent = new Intent(CameraOpenTest.this, CameraAutoTestActivity.class);
				startActivityForResult(intent, REQUEST_CODE_CAMERA);
				break;

			default:
				break;
			}
		};
	};
	
	//Test System Camera Launcher
	private void TestSystemCamera() {
		Intent intent = new Intent(this, CameraOpenService.class);
		if (mMaxCount != 0)
			intent.putExtra("max", mMaxCount);
		intent.putExtra("cmd", 1);
		startService(intent);
	}
	
	private void startTest() {
		mTimer = new Timer();
		mTimer.schedule(new TimerTask() {
			public void run() {
				if (mMaxCount != 0 && mNowCount >= mMaxCount || !isTesting) {
					return;
				} else {
					mNowCount++;
					turnCameraOn();
				}
				
			}
		}, 500L, 6000L);
	}

	private void stopTest() {
		Intent intent = new Intent(this, CameraOpenService.class);
		intent.putExtra("cmd", 0);
		startService(intent);
		stopService(intent);
		
		if (mTimer != null)
			mTimer.cancel();
	}

	private void turnCameraOff() {
		NativeInputManager.sendKeyDownUpSync(4);
	}

	private void turnCameraOn() {
		Intent localIntent = new Intent();
		localIntent.setAction("android.media.action.IMAGE_CAPTURE");
		localIntent.addFlags(335544320);
		startActivity(localIntent);
		mTimer.schedule(new TimerTask() {
			public void run() {
				turnCameraOff();
			}
		}, 3000L);
	}
	
	//Test System Camera Launcher end --- ---
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		releaseWakeLock();
	}
	
	private void holdWakeLock() {
		PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
		mWakeLock = powerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, getClass().getCanonicalName());
		mWakeLock.acquire();
	}
	
	private void releaseWakeLock() {
		if (mWakeLock != null && mWakeLock.isHeld()) {
			mWakeLock.release();
		}
	}
	

}
